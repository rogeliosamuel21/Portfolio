---
import { FEATURED_PROJECTS } from "../../utils/projects";
import FeaturedProjectCard from "./featured-project-card.astro";

interface Props {
  projects?: {
    image: ImageMetadata;
    alt: string;
    name: string;
    techs: string[];
    href: string;
  }[];
  /**
   * Used for transition api and persist only the first component instance,
   * because featured are in home page and also in the first row in work page
   */
  persists?: boolean;
  id?: string;
}

const {
  projects = FEATURED_PROJECTS,
  persists = false,
  id = "work",
} = Astro.props;
---

<project-section data-id={id}>
  <section
    id={id}
    class="mt-16 mx-4 md:mx-8 2xl:mx-24 projects-section gap-8"
    transition:persist={persists}
  >
    {
      projects.map((p, i) => (
        <FeaturedProjectCard
          image={p.image}
          alt={p.alt}
          name={p.name}
          techs={p.techs}
          href={p.href}
          isDefaultOpen={i === 1}
          class={i === 0 ? "left" : i === 1 ? "center" : "right"}
        />
      ))
    }
  </section>
</project-section>

<style>
  .projects-section {
    display: flex;
    flex-direction: column;
    gap: 32px;
  }

  @media screen and (min-width: 1024px) {
    .projects-section {
      display: grid;
      gap: 32px;
      transition: 0.2s;
      animation: ease;
      grid-template-columns: 0.2fr 1fr 0.2fr;
    }
  }

  :where(.left, .center, .right) {
    animation: ease;
  }

  .expand-left {
    grid-template-columns: 1fr 0.2fr 0.2fr;
  }

  .expand-center {
    grid-template-columns: 0.2fr 1fr 0.2fr;
  }

  .expand-right {
    grid-template-columns: 0.2fr 0.2fr 1fr;
  }
</style>

<script>
  class ProjectSection extends HTMLElement {
    connectedCallback() {
      console.log("loaded");
      // Set initial height of the section, this to avoid the section to resize when some project card expands and tries to respect its dimensions
      const id = this.dataset.id ?? "";

      const $section = document.getElementById(id);
      const $left = $section?.querySelector(".left");
      const $center = $section?.querySelector(".center");
      const $right = $section?.querySelector(".right");

      const sectionHeight = $section?.offsetHeight;
      const isLg = window.matchMedia("(min-width: 1024px)").matches;

      if ($section && isLg) {
        $section.style.height = `${sectionHeight}px`;
      }

      // Re-set the section size when the window is resized
      const observer = new ResizeObserver((entries) => {
        for (let entry of entries) {
          const height = entry.contentRect.height.toFixed();
          const isLg = window.matchMedia("(min-width: 1024px)").matches;

          if ($section && isLg) {
            $section.style.height = `${height}px`;
            return;
          }

          if (!isLg && $section) {
            $section.style.height = "auto";
          }
        }
      });

      if ($left) {
        observer.observe($left);
      }

      // Expand the section when the mouse enters the left, center or right section
      function expand(elName: string, $el: Element) {
        console.log("expand", elName);

        if (!$section) return;

        $section.classList.remove("expand-left");
        $section.classList.remove("expand-center");
        $section.classList.remove("expand-right");

        $left?.classList.remove("expand");
        $center?.classList.remove("expand");
        $right?.classList.remove("expand");

        $section.classList.add(`expand-${elName}`);
        $el.classList.add("expand");
      }

      if ($left) {
        $left.addEventListener("mouseenter", () => expand("left", $left));
      }

      if ($center) {
        $center.addEventListener("mouseenter", () => expand("center", $center));
      }

      if ($right) {
        $right.addEventListener("mouseenter", () => expand("right", $right));
      }
    }
  }

  customElements.define("project-section", ProjectSection);
</script>
